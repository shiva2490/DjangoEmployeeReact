 React Forms: Checkboxes, Radios, and Select Dropdowns (Full Notes)
🔷 1. ✅ Checkbox – Single (True/False)
📌 What it does:
A checkbox is either checked (true) or unchecked (false)

📦 State Setup:
jsx
Copy
Edit
const [agree, setAgree] = useState(false);
🧠 Controlled Checkbox:
jsx
Copy
Edit
<label>
  <input
    type="checkbox"
    name="agree"
    checked={agree}
    onChange={(e) => setAgree(e.target.checked)}
  />
  I agree to the terms
</label>
🔍 Explanation:
Prop	Meaning
checked={agree}	Controlled by state (true/false)
e.target.checked	Returns boolean (true/false)

🔷 2. ✅ Checkbox Group (Multiple Selections)
📌 Use case:
Let users choose multiple options (like pizza toppings)

📦 State:
jsx
Copy
Edit
const [toppings, setToppings] = useState([]);
🧠 Component:
jsx
Copy
Edit
function handleToppingChange(e) {
  const { value, checked } = e.target;
  setToppings(prev =>
    checked ? [...prev, value] : prev.filter(t => t !== value)
  );
}

["cheese", "mushroom", "olive"].map(t => (
  <label key={t}>
    <input
      type="checkbox"
      value={t}
      checked={toppings.includes(t)}
      onChange={handleToppingChange}
    />
    {t}
  </label>
));
🔷 3. ✅ Radio Buttons (Only One Choice)
📌 Use case:
Pick only one option from a group (like gender)

📦 State:
jsx
Copy
Edit
const [gender, setGender] = useState("");
🧠 Component:
jsx
Copy
Edit
<label>
  <input
    type="radio"
    name="gender"
    value="male"
    checked={gender === "male"}
    onChange={(e) => setGender(e.target.value)}
  />
  Male
</label>

<label>
  <input
    type="radio"
    name="gender"
    value="female"
    checked={gender === "female"}
    onChange={(e) => setGender(e.target.value)}
  />
  Female
</label>
🔍 Explanation:
All radios share the same name prop

checked compares state value

value is the actual option

🔷 4. ✅ Select Dropdown (Single Select)
📌 Use case:
Pick one from a dropdown list

📦 State:
jsx
Copy
Edit
const [country, setCountry] = useState("");
🧠 Component:
jsx
Copy
Edit
<select
  name="country"
  value={country}
  onChange={(e) => setCountry(e.target.value)}
  required
>
  <option value="">-- Choose Country --</option>
  <option value="IN">India</option>
  <option value="US">USA</option>
</select>
🔷 5. ✅ Select Dropdown (Multi Select)
📌 Use case:
Pick multiple values from dropdown (hold CTRL to select)

📦 State:
jsx
Copy
Edit
const [languages, setLanguages] = useState([]);
🧠 Component:
jsx
Copy
Edit
function handleLanguageChange(e) {
  const selected = Array.from(e.target.selectedOptions, o => o.value);
  setLanguages(selected);
}

<select multiple value={languages} onChange={handleLanguageChange}>
  <option value="js">JavaScript</option>
  <option value="py">Python</option>
  <option value="java">Java</option>
</select>
✅ Generic handleChange Function (Reusable Pattern)
jsx
Copy
Edit
function handleChange(e) {
  const { name, type, value, checked } = e.target;
  setFormData(prev => ({
    ...prev,
    [name]: type === "checkbox" ? checked : value
  }));
}
✅ Works for: text, checkbox, radio, select
✅ Scalable for 10+ fields with one function

⚠️ Common Mistakes
Mistake	Fix
value used for checkbox	Use checked instead
Forget name in radios	Add name="gender" to all radio buttons
Controlled/uncontrolled warning	Set default value in state (e.g. "" or false)
Forget multiple in multi-select	Add multiple attribute on <select>

🧠 Developer Pro Tips
Tip	Why
Use labels for accessibility	Click label to focus input
Store checkbox group as array	Helps when sending to backend
Use value for all input types except checkbox	Checkboxes use checked
Use required for simple validation	HTML handles it